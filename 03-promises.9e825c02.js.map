{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","addEventListener","handleSubmit","position","event","preventDefault","delay","currentTarget","elements","value","step","amount","reset","delayTimeout","Number","i","setTimeout","createPromise","then","console","log","catch","shouldResolve","Math","random","Promise","resolve","reject"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,SAAUC,GAEhC,IAAIC,EAAW,EAEf,SAASD,EAAaE,GACpBA,EAAMC,iBAEFC,IAAAA,EAAQF,EAAMG,cAAcC,SAASF,MAAMG,MAC3CC,EAAON,EAAMG,cAAcC,SAASE,KAAKD,MACvCE,MAAAA,EAASP,EAAMG,cAAcC,SAASG,OAAOF,MAI/CE,GAFJP,EAAMG,cAAcK,QAEhBD,GAAU,EACZ,OAGEE,IAAAA,EAAeC,OAAOR,GAErB,IAAA,IAAIS,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,EAC/BC,WAAW,KAGTC,EAFAd,GAAY,EAEYG,GACrBY,KAAK,EAAGf,SAAAA,EAAUG,MAAAA,MACjBa,QAAQC,2BAA2BjB,QAAeG,SAEnDe,MAAM,EAAGlB,SAAAA,EAAUG,MAAAA,MAClBa,QAAQC,0BAA0BjB,QAAeG,SAErDA,EAAQQ,OAAOR,GAASQ,OAAOJ,IAC9BG,GAEHA,EAAeC,OAAOD,GAAgBC,OAAOJ,GAE/CP,EAAW,EAGb,SAASc,EAAcd,EAAUG,GACzBgB,MAAAA,EAAgBC,KAAKC,SAAW,GAC/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,CAAEvB,SAAAA,EAAUG,MAAAA,IAEpBqB,EAAO,CAAExB,SAAAA,EAAUG,MAAAA","file":"03-promises.9e825c02.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector(\".form\");\n\nform.addEventListener(\"submit\", handleSubmit);\n\nlet position = 0;\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  let delay = event.currentTarget.elements.delay.value;\n  let step = event.currentTarget.elements.step.value;\n  const amount = event.currentTarget.elements.amount.value;\n\n  event.currentTarget.reset();\n\n  if (amount <= 0) {\n    return;\n  }\n  \n  let delayTimeout = Number(delay);\n  \n  for (let i = 0; i < amount; i += 1){\n    setTimeout(() => {\n      position += 1;\n\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      delay = Number(delay) + Number(step);\n    }, delayTimeout);\n\n    delayTimeout = Number(delayTimeout) + Number(step);\n  }\n  position = 0;\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"]}